apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: backend-ci-runner-
spec:
  entrypoint: backend-ci
  onExit: notify
  serviceAccountName: argo-workflow
  arguments:
    parameters:
      - name: github-url
      - name: commit
      - name: repo
      - name: image-tag
      - name: slack-channel
      - name: endpoint
      - name: src-path
  templates:
  - name: notify
    container:
      image: dictybase/slack-notify
      args: ["-t", $(TOKEN),
            "-c","{{workflow.parameters.slack-channel}}",
            "-e","{{workflow.parameters.endpoint}}",
            "-w", "{{workflow.name}}",
            "-s","{{workflow.status}}",
            "--log-level","info"
      ]
      env:
      - name: TOKEN
        valueFrom:
          secretKeyRef:
            name: slack-secret
            key: oauth-token

  - name: backend-ci
    steps: # <--- ci pipeline steps
      - - name: ref-parser
          template: ref-parser
      - - name: build-push # image build and push
          template: build-push
          arguments:
            parameters:
              - name: tag
                value: "{{steps.ref-parser.outputs.parameters.tag}}"

  # parse ref string from webhook response
  - name: ref-parser
    container:
      image: alpine:3.7
      args: ['echo "{{workflow.parameters.image-tag}}" | sed -E "s/refs\/(heads|tags)\///w ref.txt"']
      command: [sh, -c]
    outputs:
      parameters:
      - name: tag
        valueFrom:
          path: "ref.txt"

  ## build in cluster docker image and pushes to docker hub
  - name: build-push
    inputs:
      artifacts:
      - name: source
        path: "{{workflow.parameters.src-path}}"
        git:
          repo: "{{workflow.parameters.github-url}}"
          revision: "{{workflow.parameters.commit}}"
      parameters:
      - name: tag
    container:
      image: gcr.io/kaniko-project/executor:latest
      args: ["--dockerfile=build/package/Dockerfile",
            "--context={{workflow.parameters.src-path}}",
            "--destination=dictybase/{{workflow.parameters.repo}}:{{inputs.parameters.tag}}",
            "--cache=true",
            "--cache-repo=dictybase/{{workflow.parameters.repo}}-cache"
            ]
      volumeMounts:
        - name: docker-secret
          mountPath: /.docker
          readOnly: true
  volumes:
    - name: docker-secret
      secret:
        secretName: docker-secret

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "dictycontent-postgres.fullname" . }}
  labels:
    app: {{ template "dictycontent-postgres.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  template:
    metadata:
      labels:
        app: {{ template "dictycontent-postgres.fullname" . }}
        group: {{ .Values.group | quote }}
        provider: {{ .Values.provider | quote }}
        mode: {{ .Values.mode | quote }}
    spec:
       {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: [
                  "-c",
                  "config_file=/etc/postgresql/postgresql.conf",
                ]
          env:
          - name: POSTGRES_USER
            valueFrom: 
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.user
            # Required for pg_isready in the health probes.
          - name: PGUSER
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.user
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.database
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.password
          - name: POSTGRES_INITDB_ARGS
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.initdbargs 
          - name: POSTGRES_INITDB_WALDIR
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: postgres.dictycontent.initdbwaldir
          - name: DICTYCONTENT_DB
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictycontent.database
          - name: DICTYCONTENT_USER
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictycontent.user
          - name: DICTYCONTENT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictycontent.password
          - name: DICTYUSER_DB
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictyuser.database
          - name: DICTYUSER_USER
            valueFrom:
              configMapKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictyuser.user
          - name: DICTYUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "dictycontent-postgres.name" . }}
                key: dictyuser.password
          - name: POD_IP
            valueFrom: { fieldRef: { fieldPath: status.podIP }}
          ports:
          - name: {{ .Values.service.name | trunc 15 | quote }}
            containerPort: 5432
          livenessProbe:
            exec:
              command:
              - sh 
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 3
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - sh 
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 5
          {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 10 }}
          {{- end }}
          volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data/pgdata
            subPath: {{ .Values.persistence.subPath | quote }}
{{- if .Values.metrics.enabled }}
        - name: metrics 
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.PullPolicy | quote }}
          env:
          - name: DATA_SOURCE_NAME
            value: postgresql://postgres@127.0.0.1:5432?sslmode=disable
          ports:
          - name: metrics
            containerPort: 9187
          resources:
            requests:
{{ toYaml .Values.metrics.resources | indent 10 }}
{{- end }}
      volumes:
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "dictycontent-postgres.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end -}}
      {{- if and .Values.metrics.enabled .Values.metrics.customMetrics }}
      - name: custom-metrics
        secret:
          secretName: {{ template "dictycontent-postgresql.fullname" . }}
          items:
            - key: custom-metrics.yaml
              path: custom-metrics.yaml
      {{- end }}

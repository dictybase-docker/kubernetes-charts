# Default values for dictycontent-postgres.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
group: database
provider: dictycontent
mode: standalone
image:
  repository: dictybase/dictycontent-postgres
  tag: 1.1.0
  pullPolicy: Always

## superuser and database
postgresUser: postgres
postgresDatabase: postgres

## Specify initdb arguments, e.g. --data-checksums
## ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
## ref: https://www.postgresql.org/docs/current/static/app-initdb.html
postgresInitdbArgs: "--data-checksums"

## Specify another location of the postgres transaction log.
## ref: https://github.com/docker-library/docs/tree/master/postgres#postgres_initdb_waldir
# postgresInitdbWaldir:


## dictycontent users and databases
dictycontentUser: dictycontentmaster
dictycontentDatabase: dictycontent

## Persist data to a persistent volume
persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:
  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default


  ### database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ## set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  # storageClass: 

  # annotations: {}
 

  accessMode: ReadWriteOnce
  size: 2Gi
  subPath: dictycontent-db

metrics:
  enabled: false
  image: 
    repository: wrouesnel/postgres_exporter
    tag: v0.4.1
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    ## Define additional custom metrics
    ## ref: https://github.com/wrouesnel/postgres_exporter#adding-new-metrics-via-a-config-file
    # customMetrics:
    #   pg_database:
    #     query: "SELECT d.datname AS name, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_database_size(d.datname) ELSE 0 END AS size FROM pg_catalog.pg_database d where datname not in ('template0', 'template1', 'postgres')"
    #     metrics:
    #       - name:
    #           usage: "LABEL"
    #           description: "Name of the database"
    #       - size_bytes:
    #           usage: "GAUGE"
    #           description: "Size of the database in bytes"

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
# resources:
 # requests:
  # memory: 256Mi
  # cpu: 100m

# Setup for service, don't uncomment rather override it
service:
  name: dictycontent-backend
  type: NodePort 
  port: 5435

# command line argument that is passed to the postgresql server daemon
# make sure always to use the first two argument to use the custom configuration 
# file use the by the docker container
#server:
  #args: [
          #"-c",
          #"config_file=/etc/postgresql/postgresql.conf",
          #"-c",
          #"work_mem=10MB",
          #"-c",
          #"maintenance_work_mem=100MB",
          #"-c",
          #"max_connections=30"
        #]

## Node labels and tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
nodeSelector: {}
tolerations: []
affinity: {}
